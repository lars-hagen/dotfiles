#!/bin/bash

CONFIG_FILE="$HOME/.aerospace.toml"
BACKUP_FILE="$HOME/.aerospace.toml.bak"
TEMP_FILE="/tmp/aerospace_temp.toml"

usage() {
    echo "Usage: $0 WORKSPACE [MONITOR|toggle]"
    echo
    echo "Move a workspace to a specific monitor or toggle its current configuration"
    echo
    echo "Arguments:"
    echo "  WORKSPACE   The workspace name (e.g., slack, 1, S1, L1)"
    echo "  MONITOR    The monitor configuration (e.g., dell, built-in, dell,built-in)"
    echo "  toggle     Toggle the current monitor configuration"
    echo
    echo "Examples:"
    echo "  $0 slack dell           # Move slack to dell monitor"
    echo "  $0 slack main           # Move slack to main monitor"
    echo "  $0 slack dell,built-in  # Move slack to dell with built-in fallback"
    echo "  $0 slack toggle         # Toggle current configuration"
    exit 1
}

# Function to backup the current config
backup_config() {
    cp -L "$CONFIG_FILE" "$BACKUP_FILE"
}

# Function to restore from backup if something goes wrong
restore_backup() {
    if [ -f "$BACKUP_FILE" ]; then
        cp "$BACKUP_FILE" "$CONFIG_FILE"
        rm "$BACKUP_FILE"
        echo "Restored from backup"
    fi
}

# Validate monitor name
validate_monitor() {
    local monitor=$1
    case "$monitor" in
        main|dell|built-in) return 0 ;;
        *) echo "Error: Invalid monitor '$monitor'. Must be 'main', 'dell', or 'built-in'"; exit 1 ;;
    esac
}

# Get current monitor config for a workspace
get_current_config() {
    local workspace=$1
    local config
    config=$(grep "^$workspace = " "$CONFIG_FILE" | sed "s/^$workspace = //")
    echo "$config"
}

# Toggle the current configuration
toggle_config() {
    local current_config=$1
    local current_monitor
    local current_fallback
    
    # Extract current configuration
    if [[ $current_config =~ ^\[\'([^\']+)\',\ *\'([^\']+)\'\]$ ]]; then
        current_monitor="${BASH_REMATCH[1]}"
        current_fallback="${BASH_REMATCH[2]}"
        # Swap monitors
        MONITOR=$current_fallback
        FALLBACK_MONITOR=$current_monitor
    elif [[ $current_config =~ ^\'([^\']+)\'$ ]]; then
        current_monitor="${BASH_REMATCH[1]}"
        if [[ $current_monitor == "main" ]]; then
            echo "Cannot toggle 'main' monitor configuration"
            exit 1
        fi
        if [[ $current_monitor == "dell" ]]; then
            MONITOR=$current_monitor
            FALLBACK_MONITOR="built-in"
        else
            MONITOR=$current_monitor
            FALLBACK_MONITOR="dell"
        fi
    else
        echo "Error: Could not parse current configuration"
        exit 1
    fi
}

# Main script
[ $# -lt 2 ] && usage

WORKSPACE=$1
MONITOR_CONFIG=$2

# Handle toggle argument
if [[ "$MONITOR_CONFIG" == "toggle" ]]; then
    CURRENT_CONFIG=$(get_current_config "$WORKSPACE")
    if [[ -z "$CURRENT_CONFIG" ]]; then
        echo "Error: No existing configuration found for workspace $WORKSPACE"
        exit 1
    fi
    toggle_config "$CURRENT_CONFIG"
else
    # Split the monitor config if it contains a comma
    if [[ $MONITOR_CONFIG == *","* ]]; then
        IFS=',' read -r MONITOR FALLBACK_MONITOR <<< "$MONITOR_CONFIG"
    else
        MONITOR=$MONITOR_CONFIG
        FALLBACK_MONITOR=""
    fi

    validate_monitor "$MONITOR"
    [ -n "$FALLBACK_MONITOR" ] && validate_monitor "$FALLBACK_MONITOR"
fi

backup_config

# Create a temporary file with the changes
cp -L "$CONFIG_FILE" "$TEMP_FILE"

if [ -n "$FALLBACK_MONITOR" ]; then
    # Update with array format [monitor1, monitor2]
    sed -i '' "/^\[workspace-to-monitor-force-assignment\]/,/^[.*]/s/^$WORKSPACE = .*/$WORKSPACE = ['$MONITOR', '$FALLBACK_MONITOR']/" "$TEMP_FILE"
else
    # Update with single monitor format
    sed -i '' "/^\[workspace-to-monitor-force-assignment\]/,/^[.*]/s/^$WORKSPACE = .*/$WORKSPACE = '$MONITOR'/" "$TEMP_FILE"
fi

# Move the temporary file to the final location
mv "$TEMP_FILE" "$CONFIG_FILE"

# Reload AeroSpace config
aerospace reload-config

echo "Moved workspace $WORKSPACE to monitor $MONITOR${FALLBACK_MONITOR:+ with fallback to $FALLBACK_MONITOR}"